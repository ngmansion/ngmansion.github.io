<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<HTML><HEAD><TITLE>ARM7TDMI</TITLE>
<META content="text/html; charset=Shift_JIS" http-equiv=Content-Type>
<META name=robots content=noindex,nofollow><LINK rel=stylesheet type=text/css 
href="http://f16.aaa.livedoor.jp/~sinzan/cheat/arm/p.css"><LINK rel=stylesheet 
type=text/css 
href="http://f16.aaa.livedoor.jp/~sinzan/cheat/arm/../../css/arm7tdmi.css">
<META name=GENERATOR content="MSHTML 8.00.7601.17720"></HEAD>
<BODY aLink=#00ffff link=#0066ff bgColor=#000000 text=#ffffff>
<SCRIPT type=text/javascript 
src="http://www.livedoor.com/js/lcslog.js">
</SCRIPT>

<SCRIPT type=text/javascript src="">
</SCRIPT>

<DIV align=center>
<P class=border>ARM7TDMI</P>
<P>&nbsp;</P>
<P align=left>GBAに搭載されているCPUのARM7TDMIの命令を簡単に説明します。</P>
<P align=left>ARM系CPUにはARM命令（32bit）とThumb命令（16bit）がありますが、GBAが携帯ゲーム機ということから</P>
<P align=left>Thumb命令より消費電力が大きいARM命令は、ゲーム上のステータスの値やフラグの値等の処理にはほ</P>
<P align=left>とんど使われません。ということでThumb命令のみ説明することにします。</P>
<HR>

<P class=border>説明の前に</P>
<P><FONT color=#ff0000>※基本的な改造の知識を持っていることが条件です。</FONT></P>
<P><FONT color=#ff0000>※今回のページを作成するに当たって、[ARM 
MEMO]、[リファレンスマニュアル]を参考にさせてもらいました。</FONT></P>
<P><FONT color=#ff0000>※見にくいのは、ご了承ください。</FONT></P>
<P>※命令を説明するの際に使われているRd,Rs,RnはR0～R7まで、Hd,HsはR8～R15までの汎用レジスタが使用可能。</P>
<P>※$0x??は16進数、#???は10進数を表します。</P>
<P>※#Offset5、#Offset8は5、8ビット長のオフセットを表します。</P>
<P>※immは数値です（10進数&amp;16進数両方の形式で記述可能）。今回の説明では基本的には10進数として扱っていきます。</P>
<P>※論理演算についてわからなかったら、他のところで勉強してください。</P>
<P>※ネット上にはGBA（ARM）用のアセンブラがありますので、バイナリエンコーディングは省きます。</P>
<P>※本来ならばもっと詳細に説明をしなければいけないと思いますが、ARM系のCPUでGBAのプログラムを組むのではなく、</P>
<P>　あくまでも　GBA上でちょっとしたプログラム改造やパラサイトルーチン等を作ることを目的としているので省きます。</P>
<P>※本当に適当に書いた物なので、これ以上詳しい情報が知りたければ<A 
href="http://www.arm.com/">ARM</A>へ。但しリファレンスマニュアルは英語です。</P>
<HR>

<P class=border align=center>ショートカット</P>
<P><A href="http://f16.aaa.livedoor.jp/~sinzan/cheat/arm/#Register">レジスタ</A></P>
<P><A 
href="http://f16.aaa.livedoor.jp/~sinzan/cheat/arm/#Condition">条件フラグ</A></P>
<P><A 
href="http://f16.aaa.livedoor.jp/~sinzan/cheat/arm/#ALU">条件フラグをセットする命令</A></P>
<P><A 
href="http://f16.aaa.livedoor.jp/~sinzan/cheat/arm/#S_R">シフト/ローテイト命令</A></P>
<P><A href="http://f16.aaa.livedoor.jp/~sinzan/cheat/arm/#Add">加算命令</A></P>
<P><A href="http://f16.aaa.livedoor.jp/~sinzan/cheat/arm/#Sub">減算命令</A></P>
<P><A href="http://f16.aaa.livedoor.jp/~sinzan/cheat/arm/#Cmp">比較命令</A></P>
<P><A 
href="http://f16.aaa.livedoor.jp/~sinzan/cheat/arm/#Logical">論理演算命令</A></P>
<P><A href="http://f16.aaa.livedoor.jp/~sinzan/cheat/arm/#Mov">格納命令</A></P>
<P><A href="http://f16.aaa.livedoor.jp/~sinzan/cheat/arm/#Mul">積算命令</A></P>
<P><A href="http://f16.aaa.livedoor.jp/~sinzan/cheat/arm/#Neg">符号反転命令</A></P>
<P><A href="http://f16.aaa.livedoor.jp/~sinzan/cheat/arm/#Str">ストア命令</A></P>
<P><A href="http://f16.aaa.livedoor.jp/~sinzan/cheat/arm/#Ldr">ロード命令</A></P>
<P><A 
href="http://f16.aaa.livedoor.jp/~sinzan/cheat/arm/#P_P">PUSH/POP命令</A></P>
<P><A 
href="http://f16.aaa.livedoor.jp/~sinzan/cheat/arm/#Stm_Ldm">複数のレジスタのロード、ストア命令</A></P>
<P><A href="http://f16.aaa.livedoor.jp/~sinzan/cheat/arm/#Nop">NOP命令</A></P>
<P><A href="http://f16.aaa.livedoor.jp/~sinzan/cheat/arm/#Branch">条件分岐命令</A></P>
<P><A href="http://f16.aaa.livedoor.jp/~sinzan/cheat/arm/#Jmp">無条件分岐命令</A></P>
<P><A 
href="http://f16.aaa.livedoor.jp/~sinzan/cheat/arm/#Swi">ソフトウェア割り込み命令</A></P>
<P><A 
href="http://f16.aaa.livedoor.jp/~sinzan/cheat/arm/#Break">ブレークポイント命令</A></P>
<P><A href="http://f16.aaa.livedoor.jp/~sinzan/cheat/arm/#Loop">条件ループの例</A></P>
<HR>

<P class=border align=left><A name=Register></A>レジスタ</P>
<P align=left>レジスタは以下の32bitレジスタが使用できます。</P>
<DIV align=left>
<TABLE border=1 width="24%" bgColor=#000000>
  <TBODY>
  <TR>
    <TD bgColor=#000000 width="29%">R0</TD>
    <TD bgColor=#000000 width="71%">32bit汎用レジスタ</TD></TR>
  <TR>
    <TD>R1</TD>
    <TD>32bit汎用レジスタ</TD></TR>
  <TR>
    <TD>R2</TD>
    <TD>32bit汎用レジスタ</TD></TR>
  <TR>
    <TD>R3</TD>
    <TD>32bit汎用レジスタ</TD></TR>
  <TR>
    <TD>R4</TD>
    <TD>32bit汎用レジスタ</TD></TR>
  <TR>
    <TD>R5</TD>
    <TD>32bit汎用レジスタ</TD></TR>
  <TR>
    <TD>R6</TD>
    <TD>32bit汎用レジスタ</TD></TR>
  <TR>
    <TD>R7</TD>
    <TD>32bit汎用レジスタ</TD></TR>
  <TR>
    <TD bgColor=#999999>R8</TD>
    <TD bgColor=#999999>32bit汎用レジスタ</TD></TR>
  <TR>
    <TD bgColor=#999999>R9</TD>
    <TD bgColor=#999999>32bit汎用レジスタ</TD></TR>
  <TR>
    <TD bgColor=#999999>R10</TD>
    <TD bgColor=#999999>32bit汎用レジスタ</TD></TR>
  <TR>
    <TD bgColor=#999999>R11</TD>
    <TD bgColor=#999999>32bit汎用レジスタ</TD></TR>
  <TR>
    <TD bgColor=#999999>R12</TD>
    <TD bgColor=#999999>32bit汎用レジスタ</TD></TR>
  <TR>
    <TD>R13(SP)</TD>
    <TD>スタックポインタ</TD></TR>
  <TR>
    <TD>R14(LR)</TD>
    <TD>リンクレジスタ</TD></TR>
  <TR>
    <TD>R15(PC)</TD>
    <TD>プログラムカウンタ</TD></TR>
  <TR>
    <TD bgColor=#999999>CPSR</TD>
    <TD bgColor=#999999>カレントステータスレジスタ</TD></TR></TBODY></TABLE>
<P><FONT color=#999999>※灰色で示されているのがThumbステート時に通常使わないレジスタです。</FONT></P>
<P>※Thumbステート時にはR8～R15は四則演算等、汎用レジスタとして使うことはできないが、限定的な手段でアクセスが可能。</P>
<P>※他にもレジスタは存在しますが、ユーザー・レベルプログラムではこの程度しか使わないと判断しました。</P>
<P>　 スーパーバイザー、システムレベルでは他のレジスタも使えます。</P>
<P>※R0～R7までをLoレジスタ（下位レジスタ）、R8～R15までをHiレジスタ（上位レジスタ）と呼びます。</P>
<P>※R13(SP)のスタックポインタはPOP/PUSH命令で一時的に数値を格納しておくレジスタです。</P>
<P>※R14(LR)のリンクレジスタはBL命令等でサブルーチンに飛ぶ場合に、その次のアドレスを格納しておくレジスタです。</P>
<P>　 [0x8000000]からサブルーチンに飛ぶ場合、次の[0x8000002]を格納します。（ARM 
State時の場合は、[0x8000000]であれば、[0x8000004]を示します）</P>
<P>※R15(PC)のプログラムカウンタは、次に実行される命令のアドレスを格納しておくレジスタです。</P>
<P>　 
現在実行されているのが[0x8000000]であれば、プログラムカウンタは[0x8000002]を示します。[0x8000002]だったら、[0x8000004]という感じです。</P>
<P>　 （ARM State時の場合は、[0x8000000]であれば、[0x8000004]を示します）</P>
<P>　 BL命令でサブルーチンに飛び、元のアドレスに復帰したい場合は、[MOV PC,LR]と記述してやると良いです。</P>
<HR>

<P class=border><A name=Condition></A>条件フラグ</P>
<TABLE border=1 width="32%">
  <TBODY>
  <TR>
    <TD height=19 vAlign=center width="16%" align=middle>N</TD>
    <TD width="84%">Negative/Less Than</TD></TR>
  <TR>
    <TD height=19 vAlign=center align=middle>Z</TD>
    <TD>Zero/Equal</TD></TR>
  <TR>
    <TD height=19 vAlign=center align=middle>C</TD>
    <TD>Carry/Borrow/Extend</TD></TR>
  <TR>
    <TD height=19 vAlign=center align=middle>V</TD>
    <TD>Overflow</TD></TR>
  <TR bgColor=#999999>
    <TD height=19 vAlign=center align=middle>I</TD>
    <TD>IRQ Disable</TD></TR>
  <TR bgColor=#999999>
    <TD height=19 vAlign=center align=middle>F</TD>
    <TD>FIQ Disable</TD></TR>
  <TR bgColor=#999999>
    <TD height=19 vAlign=center align=middle>T</TD>
    <TD>THUMB State</TD></TR></TBODY></TABLE>
<P>補足：条件フラグとはALU演算の結果でCPSR（カレントステータスレジスタの）にON（1）、OFF（0）にされるもののことです。条件命令の時に判定として使われます。</P>
<P>　　　　N、Z、C、Vフラグはコンディションコードに保存されます。コンディションコードとは演算の結果により変化し、その後の命令を実行するか否かを決定する</P>
<P>　　　　のに使用されます。Thumb命令でこれの影響を受けるのは<A 
href="http://f16.aaa.livedoor.jp/~sinzan/cheat/arm/#Branch">Branch命令</A>だけです。</P>
<P>　　　　I、F、Tフラグについてはプログラム改造レベルで扱うフラグではありません。ちなみにTはThumb　State時にはずっと1（ON）になってます。</P>
<HR>

<P class=border>　　　　 <A name=ALU></A>条件フラグセットする命令</P>
<P>これらの命令はR0～R7レジスタ間でALU演算（演算結果によってCPSRに条件フラグをセットする命令）を行う命令です。</P>
<TABLE border=1 width="17%">
  <TBODY>
  <TR>
    <TD height=19 width="33%">
      <DIV align=left>AND</DIV></TD>
    <TD width="67%">論理積</TD></TR>
  <TR>
    <TD height=19>EOR</TD>
    <TD>排他的論理和</TD></TR>
  <TR>
    <TD height=19>LSL</TD>
    <TD>論理左シフト</TD></TR>
  <TR>
    <TD height=19>LSR</TD>
    <TD>論理右シフト</TD></TR>
  <TR>
    <TD height=19>ASR</TD>
    <TD>算術右シフト</TD></TR>
  <TR>
    <TD height=19>ADC</TD>
    <TD>キャリー付き加算</TD></TR>
  <TR>
    <TD height=19>SBC</TD>
    <TD>キャリー付き減算</TD></TR>
  <TR>
    <TD height=19>ROR</TD>
    <TD>右ローテイト</TD></TR>
  <TR>
    <TD height=19>TST</TD>
    <TD>ビットテスト</TD></TR>
  <TR>
    <TD height=19>NEG</TD>
    <TD>符号反転</TD></TR>
  <TR>
    <TD height=19>CMP</TD>
    <TD>比較</TD></TR>
  <TR>
    <TD height=19>CMN</TD>
    <TD>逆比較</TD></TR>
  <TR>
    <TD height=19>ORR</TD>
    <TD>論理和</TD></TR>
  <TR>
    <TD height=19>MUL</TD>
    <TD>積算</TD></TR>
  <TR>
    <TD height=19>BIC</TD>
    <TD>ビットクリア</TD></TR>
  <TR>
    <TD height=19>MVN</TD>
    <TD>ビット反転</TD></TR></TBODY></TABLE>
<P>その他</P>
<TABLE border=1 width="17%">
  <TBODY>
  <TR>
    <TD height=19 width="33%">
      <DIV align=left>ADD</DIV></TD>
    <TD width="67%">加算</TD></TR>
  <TR>
    <TD height=19>SUB</TD>
    <TD>減算</TD></TR></TBODY></TABLE>
<P>補足：これらの演算は結果をCPSR（カレントステータスレジスタ）の条件フラグにセットします。</P>
<P>　　　 命令の詳しいフォーマットは下に記述してあります。</P>
<HR>

<P class=border><A id=S_R name=S_R></A>シフト命令（Shift/Rotate）</P>
<TABLE border=1 width="53%">
  <TBODY>
  <TR>
    <TD height=19 width="26%">
      <DIV align=left>LSL Rd,Rs,#Offset5</DIV></TD>
    <TD width="74%">Rsを5ビット長で表される値だけ論理左シフトしRdに格納</TD></TR>
  <TR>
    <TD>
      <DIV align=left>LSL Rd,Rs</DIV></TD>
    <TD>RdをRsの値の分だけ論理左シフト</TD></TR>
  <TR>
    <TD>
      <DIV align=left>LSR Rd,Rs,#Offset5</DIV></TD>
    <TD>Rsを5ビット長で表される値だけ論理右シフトしRdに格納</TD></TR>
  <TR>
    <TD>LSR Rd,Rs</TD>
    <TD>RdをRsの値の分だけ論理右シフト</TD></TR>
  <TR>
    <TD>ASR Rd,Rs,#Offset5</TD>
    <TD>Rsを5ビット長で表される値だけ算術右シフトしRdに格納</TD></TR>
  <TR>
    <TD>ASR Rd,Rs</TD>
    <TD>RdをRsの値の分だけ算術右シフト</TD></TR>
  <TR>
    <TD>ROR Rd,Rs</TD>
    <TD>RdをRsの値の分だけ右ローテイト</TD></TR></TBODY></TABLE>
<P>例：LSL R0,R1,#1</P>
<P>意味：R1の内容を1bit左に論理シフト、その結果をR0に代入。</P>
<P>補足：左に○bitシフトすることにより元の値が2の○乗されていく。右の場合は2の-○乗。</P>
<P>　　　　よくある経験値n倍、1/n倍等はこのシフト命令を用いて作られる。</P>
<HR>
</DIV>
<P class=border align=left><A name=Add></A>加算命令（Add）</P>
<DIV align=left>
<TABLE border=1 width="59%">
  <TBODY>
  <TR>
    <TD height=19 width="22%">
      <DIV align=left>ADD Rd,Rs,Rn</DIV></TD>
    <TD width="78%">RsとRnを加算しRdに格納</TD></TR>
  <TR>
    <TD>
      <DIV align=left>ADD Rd,Rs,#Offset3</DIV></TD>
    <TD>Rsと3ビット長で表される値を加算しRdに格納</TD></TR>
  <TR>
    <TD>ADD Rd,#Offset8</TD>
    <TD>Rdに8ビット長で表される値を加算しRdに格納</TD></TR>
  <TR>
    <TD>ADD Rd,SP,#imm</TD>
    <TD>SPに#immを足したアドレスをRdにロード</TD></TR>
  <TR>
    <TD height=19>ADD Rd,PC,#imm</TD>
    <TD>PCに#immを足したアドレスをRdにロード</TD></TR>
  <TR>
    <TD>ADD SP,#±imm</TD>
    <TD>SPに±#imm（±508まで）を加算。但しオフセットは下位2bitが0であることが条件</TD></TR>
  <TR>
    <TD>ADC Rd,Rs</TD>
    <TD>RsとRdをキャリー付き加算</TD></TR></TBODY></TABLE></DIV>
<P align=left>例：ADD R0,R1,#99</P>
<P align=left>意味：R0 = R1 + 99</P>
<P align=left>補足：[ADD Rd,SP,#imm]と[ADD 
Rd,PC,#imm]は加算と言うよりSP、PCを加算して得られたアドレスをロードする命令です。</P>
<P align=left>　　　　ADD命令はR8～R15の上位レジスタも使用することが可能です。</P>
<HR>

<DIV align=left></DIV>
<P class=border align=left><A name=Sub></A>減算命令（Subtract）</P>
<DIV align=left>
<TABLE border=1 width="47%">
  <TBODY>
  <TR>
    <TD height=19 width="27%">
      <DIV align=left>SUB Rd,Rs,Rn</DIV></TD>
    <TD width="73%">RsからRnを減算しRdに格納</TD></TR>
  <TR>
    <TD>
      <DIV align=left>SUB Rd,Rs,#Offset3</DIV></TD>
    <TD>Rsから3ビット長で表される値を減算しRdに格納</TD></TR>
  <TR>
    <TD>SUB Rd,#Offset8</TD>
    <TD>Rdから8ビット長で表される値を減算しRdに格納</TD></TR>
  <TR>
    <TD>SBC Rd,Rs</TD>
    <TD>RsからRdを NOT キャリー付き減算</TD></TR></TBODY></TABLE></DIV>
<P align=left>例：SUB R0,$0x63</P>
<P align=left>意味：R0 = R0 - 99</P>
<P align=left>補足：物を買ってもお金減らない等はこの減算命令を潰すことにより可能。逆にお金増える等は加算命令に書き換えることで</P>
<P align=left>　　　　可能になる。</P>
<HR>

<DIV align=left></DIV>
<P class=border align=left><A name=Cmp></A>比較命令（Compare）</P>
<DIV align=left>
<TABLE border=1 width="44%">
  <TBODY>
  <TR>
    <TD height=19 width="27%">CMP Rd,Rs</TD>
    <TD width="73%">Rdの内容とRsの内容を比較</TD></TR>
  <TR>
    <TD>CMP Rd,#Offset8</TD>
    <TD>Rdの内容を8ビット長で表される値を比較</TD></TR>
  <TR>
    <TD>CMN Rd,Rs</TD>
    <TD>Rdの内容とRsの内容を比較（逆比較）</TD></TR></TBODY></TABLE></DIV>
<P align=left>例：CMP Rd,$0x98967F</P>
<P align=left>意味：Rd - 9999999</P>
<P align=left>補足：CMPはSUBとまったく同じ動作をするが、違いは演算結果がレジスタに反映されない点。結果のみが条件フラグに反映される。</P>
<P>　　　 CMNはCMPと逆でADDと同じ働きをする。</P>
<HR>

<P class=border align=left><A name=Logical></A>論理演算（Logical）</P>
<DIV align=left>
<TABLE border=1 width="50%">
  <TBODY>
  <TR>
    <TD height=19 width="18%">AND Rd,Rs</TD>
    <TD width="82%">RdをRsで論理積</TD></TR>
  <TR>
    <TD height=19>ORR Rd,Rs</TD>
    <TD>RdをRsで論理和</TD></TR>
  <TR>
    <TD height=19>EOR Rd,Rs</TD>
    <TD>RdをRsで排他的論理和</TD></TR>
  <TR>
    <TD height=19>BIC Rd,Rs</TD>
    <TD>RdをNOT Rsで論理和する</TD></TR>
  <TR>
    <TD height=19>MVN Rd,Rs</TD>
    <TD>RdにNOT Rsした値を格納</TD></TR>
  <TR>
    <TD height=19>TST Rd,Rd</TD>
    <TD>RdをRsで論理積（ただし、比較命令と同じでレジスタに反映しない）</TD></TR></TBODY></TABLE></DIV>
<P align=left>あまり良い例が思いつきませんが・・・レジスタを初期化する基本的な命令</P>
<P align=left>例：EOR R0,R0</P>
<P align=left>意味：R0 = R0 EOR R0</P>
<P align=left>&nbsp;</P>
<P align=left>排他的論理和の例：X（=11111111）とY（=11110000）とします。</P>
<P align=left>　　　　11111111</P>
<P align=left><U>EOR　 
11110000</U>　;XとYの値が違う場合は真、同じ場合は偽という動作をします。排他とは他と同じにならないという意味です。</P>
<P align=left>　　　　00001111　;論理式で書くと・・・NOT（X）・Y+X・NOT（Y）。ベン図は省略（爆）。</P>
<P align=left>　　　　　　　　　　　;上位4bit（1111+1111）は入力される数がともに1で同じことから偽となり0になります。</P>
<P align=left>　　　　　　　　　　　;下位4bit（1111+0000）は入力される数が1と0で違うので真となり1になります。</P>
<P align=left>　　　　　　　　　　　;単純な数での排他的論理和をしてみましたが、複雑な数だとどうなるか等いろいろテストしてみると</P>
<P align=left>　　　　　　　　　　　;理解が深まるかと思います。テストにはWINDOWS付属の関数電卓で十分できます。</P>
<P align=left>&nbsp;</P>
<P align=left>&nbsp;</P>
<P align=left>補足：R0をR0で排他的論理和することにより0にすることができる。x86系[XOR 
EAX,EAX]等ではメモリの使用量が2Byteで済</P>
<P align=left>　　　　むため[MOV 
EAX,0]の4Byteより少ないメモリの使用量で実行できる、かつ高速なことから初期化として使われることが多</P>
<P 
align=left>　　　　いがARM系では命令長がARM（4Byte）、Thumb（2Byte）に固定されているためサイクルの違いはあれどあまり意味がないと思われる・・・（汗）。</P>
<HR>

<P class=border><A name=Mov></A>格納命令（Move）</P>
<DIV align=left>
<TABLE border=1 width="42%">
  <TBODY>
  <TR>
    <TD height=19 width="29%">MOV Rd,Rs</TD>
    <TD width="71%">RdにRsの値を格納</TD></TR>
  <TR>
    <TD height=19>MOV Rd,#Offset8</TD>
    <TD>8ビット長で表される値をRdに格納</TD></TR></TBODY></TABLE></DIV>
<P align=left>例：MOV R0,$0x63</P>
<P align=left>意味：R0 = 99</P>
<P align=left>補足：MOV命令はR8～R15の上位レジスタも使用することが可能です。</P>
<HR>

<P class=border><A name=Mul></A>積算命令（Multiply）</P>
<DIV align=left>
<TABLE border=1 width="23%">
  <TBODY>
  <TR>
    <TD height=19 width="37%">MUL Rd,Rs</TD>
    <TD width="63%">RdをRsの値で積算</TD></TR></TBODY></TABLE></DIV>
<P align=left>例：MUL R0,R1</P>
<P>意味：R0 = R0 * R1</P>
<HR>

<P class=border><A name=Neg></A>符号反転命令（Negate）</P>
<DIV align=left>
<TABLE border=1 width="30%">
  <TBODY>
  <TR>
    <TD height=19 width="27%">NEG Rd,Rs </TD>
    <TD width="73%">RdにRsの符号反転した値を入れる</TD></TR></TBODY></TABLE></DIV>
<P align=left>例：NEG Rd,Rs</P>
<P>意味：R0 = -R1</P>
<P>補足：元の値が負の場合は、反転して正になります。</P>
<HR>

<P class=border><A name=Str></A>書き込み（ストア）命令（Store）</P>
<DIV align=left>
<TABLE border=1 width="64%">
  <TBODY>
  <TR>
    <TD height=19 width="20%">STR Rd,[Rs,Rn]</TD>
    <TD width="80%">RsとRnを足したメモリアドレスにRdをワードストア（4Byte）</TD></TR>
  <TR>
    <TD height=19>STRH Rd,[Rs,Rn]</TD>
    <TD>RsとRnを足したメモリアドレスにRdをハーフワードストア（2Byte）</TD></TR>
  <TR>
    <TD height=19>STRB Rd,[Rs,Rn]</TD>
    <TD>RsとRnを足したメモリアドレスにRdをバイトストア（1Byte）</TD></TR>
  <TR>
    <TD height=19>STR Rd,[Rs,#imm]</TD>
    <TD>Rsに符号無し#imm（7bit = 124まで）を足したメモリアドレスにRdをワードストア</TD></TR>
  <TR>
    <TD height=19>STRH Rd,[Rs,#imm]</TD>
    <TD>Rsに符号無し#imm（6bit = 62まで）を足したメモリアドレスにRdをハーフワードストア</TD></TR>
  <TR>
    <TD height=19>STRB Rd,[Rs,#imm]</TD>
    <TD>Rsに符号無し#imm（5bit = 31まで）を足したメモリアドレスにRdをバイトストア</TD></TR>
  <TR>
    <TD height=19>STR Rd,[SP,#imm]</TD>
    <TD>SPに符号無し#imm（最大1020バイト）を 足したメモリアドレスにRdをワードストア</TD></TR></TBODY></TABLE></DIV>
<P align=left>例：STRB R0,[R1,#20]</P>
<P>意味：[R1 + $0x14] = R0</P>
<P>補足：#immの値は命令の書き込む長さに合わせてください。STRだったら4バイトずつ（10進だと4,8,12,16…)、STRHは2バイトずつ(10進だと2,4,6,8･･･)。</P>
<HR>

<P class=border><A name=Ldr></A>読み込み（ロード）命令（Load）</P>
<DIV align=left>
<TABLE border=1 width="75%">
  <TBODY>
  <TR>
    <TD height=19 width="17%">LDR Rd,[Rs,Rn]</TD>
    <TD width="83%">RsとRnを足したメモリアドレスの値をRdにワードロード（4Byte）</TD></TR>
  <TR>
    <TD height=19>LDRH Rd,[Rs,Rn]</TD>
    <TD>RsとRnを足したメモリアドレスの値をRdにハーフワードロード（2Byte）</TD></TR>
  <TR>
    <TD height=19>LDRB Rd,[Rs,Rn]</TD>
    <TD>RsとRnを足したメモリアドレスの値をRdにバイトロード（1Byte）</TD></TR>
  <TR>
    <TD height=19>LDR Rd,[Rs,#imm]</TD>
    <TD>Rsに符号無し#imm（7bit = 124まで）を足したメモリアドレスの値をRdにワードロード</TD></TR>
  <TR>
    <TD height=19>LDRH Rd,[Rs,#imm]</TD>
    <TD>Rsに符号無し#imm（6bit = 62まで）を足したメモリアドレスの値をRdにハーフワードロード</TD></TR>
  <TR>
    <TD height=19>LDRB Rd,[Rs,#imm]</TD>
    <TD>Rsに符号無し#imm（5bit = 31まで）を足したメモリアドレスの値をRdにバイトロード</TD></TR>
  <TR>
    <TD height=19>LDSH Rd,[Rs,Rn]</TD>
    <TD>RsにRnを足したメモリアドレスの値をRdにハーフワードロード、 Rdの上位16bitには15bit目の値がコピーされる</TD></TR>
  <TR>
    <TD height=19>LDSB Rd,[Rs,Rn]</TD>
    <TD>RsにRnを足したメモリアドレスの値をRdにバイトロード、 Rdの上位24bitには7bit目の値がコピーされる</TD></TR>
  <TR>
    <TD height=19>LDR Rd,[SP,#imm]</TD>
    <TD>SPに符号無し#imm（1020バイトまで）を足したメモリアドレスの値にRdをワードロード</TD></TR>
  <TR>
    <TD height=19>LDR Rd,[PC,#imm]</TD>
    <TD>PCに符号無し#imm（1020バイトまで）を足したメモリアドレスの値をRdにワードロード</TD></TR></TBODY></TABLE></DIV>
<P align=left>例：LDRB R0,[R1,#20]</P>
<P>意味：R0 = [R1 + $0x14]</P>
<P>補足：ストアと同じく#immの値の設定には気をつけてください。</P>
<HR>

<P class=border><A name=P_P></A>PUSH/POP命令</P>
<DIV align=left>
<TABLE border=1 width="68%">
  <TBODY>
  <TR>
    <TD height=19 width="16%">PUSH {Rlist}</TD>
    <TD width="84%">レジスタリストRlistにあるレジスタをスタックにPUSHし、 スタックポインタを更新する</TD></TR>
  <TR>
    <TD height=19>PUSH {Rlist,LR}</TD>
    <TD>レジスタリストRlistにあるレジスタとリンクレジスタを スタックにPUSHし、スタックポインタを更新する</TD></TR>
  <TR>
    <TD height=19>POP {Rlist}</TD>
    <TD>スタックからレジスタリストRlistにあるレジスタをPOPし、 スタックポインタを更新する</TD></TR>
  <TR>
    <TD height=19>POP {Rlist,PC}</TD>
    <TD>スタックからレジスタリストRlistにあるレジスタとPCを 
POPし、スタックポインタを更新する．</TD></TR></TBODY></TABLE></DIV>
<P align=left>例：PUSH {R0-R7,LR}</P>
<P align=left>意味：R0～R7、リンクレジスタをスタックに一時保存し、スタックポインタを更新。</P>
<P align=left>補足：上記の例はサブルーチンの手前で実行するとリターンアドレスとその時のレジスタの状態を保存できる</P>
<HR>

<P class=border><A name=Stm_Ldm></A>複数のレジスタのロード、ストア</P>
<DIV align=left>
<TABLE border=1 width="75%">
  <TBODY>
  <TR>
    <TD height=19 width="15%">STMIA Rd!,{Rlist}</TD>
    <TD 
    width="85%">レジスタリストRlistにあるレジスタを、ベースレジスタRdで示されるメモリアドレスにワードストアし、Rdを更新する</TD></TR>
  <TR>
    <TD height=19>LDMIA Rd!,{Rlist}</TD>
    <TD>ベースレジスタRdで示されるメモリアドレスから レジスタリストRlistにあるレジスタをワードロードし、 
  Rdを更新する</TD></TR></TBODY></TABLE></DIV>
<P align=left>例：STMIA R0!,{R1-R7}</P>
<P>意味：R1～R7をR0で示されるメモリアドレスに、R0を順にインクリメントしながらワードストアし1回ごとにR0にはインクリメントした値が書き戻される</P>
<P>別解：上の例はこのような動作を1命令分で行います。</P>
<P>　　　STR R1,[R0]</P>
<P>　　　ADD R0,#4</P>
<P>　　　STR R2,[R0]</P>
<P>　　　ADD R0,#4</P>
<P>　　　　　　・</P>
<P>　　　　　　・</P>
<P>　　　　　　・</P>
<P>　　　STR R7,[R0]</P>
<P>　　　ADD R0,#4</P>
<P>&nbsp;</P>
<P>例：LDMIA R0!,{R1-R7}</P>
<P>意味：R1～R7にR0で示されるメモリアドレスからR0を順にインクリメントしながらワードロードし1回ごとにR0にはインクリメントした値が書き戻される</P>
<P>別解：上の例はこのような動作を1命令分で行います。</P>
<P>　　　LDR R1,[R0]</P>
<P>　　　ADD R0,#4</P>
<P>　　　LDR R2,[R0]</P>
<P>　　　ADD R0,#4</P>
<P>　　　　　　・</P>
<P>　　　　　　・</P>
<P>　　　　　　・</P>
<P>　　　LDR R7,[R0]</P>
<P>　　　ADD R0,#4</P>
<P>&nbsp;</P>
<P>補足：インクリメントと聞くとプログラムやってる人は+1と想像してしまうでしょうが、レジスタが32bit（4Byte）なので、実際は4Byte</P>
<P>　　　 ずつ足されていきます。C/C++をやっている人は、アドレスを保持しているポインタ変数をインクリメントしていると考えてもらって結構です。</P>
<P>　　　 データの並びによって使う場面が限定されそうですが、アイテムの個数を全て最大にする等の処理ができそうです。</P>
<P>　　　 また、LDMIAを実行した後、ベースレジスタの値を変更してSTMIAを実行すると、メモリ間の転送（コピー）が可能です。</P>
<HR>

<P class=border><A name=Nop></A>ノーオペレーション命令（No Operation）</P>
<DIV align=left>
<TABLE border=1 width="32%">
  <TBODY>
  <TR>
    <TD height=19 width="38%">NOP （MOV R8,R8） </TD>
    <TD width="62%">何も変化しない命令を実行する</TD></TR></TBODY></TABLE></DIV>
<P align=left>例：MOV R8,R8</P>
<P align=left>意味：ノーオペレーション（NOP）</P>
<P 
align=left>補足：ARM系プロセッサでは上記の例がNOPとして扱われます。重要なのは無実行ではなくちゃんと命令を実行しているのでサイクルがあります。</P>
<P align=left>　　　 これがリファレンスのNOP命令なので処理を潰す場合はなるべくこの形を取ってください。</P>
<P align=left>　　　 ARMではMOV命令で代用してますが、PS2ではZEROレジスタを0回シフトを実行していますね。</P>
<P align=left>　　　 注意点としてはNOPが連続で並んでいる場所などは命令の処理待ちの可能性があることです。その様な場合はむやみに変更す</P>
<P align=left>　　　 ると予期せぬ結果が得られることがあります。</P>
<HR>

<P class=border><A id=Branch name=Branch></A>条件分岐命令（Branch）</P>
<DIV align=left>
<TABLE border=1 width="69%">
  <TBODY>
  <TR>
    <TD height=19 width="21%">BEQ [address]（label）</TD>
    <TD width="20%">等しい</TD>
    <TD width="42%">比較結果が等しいかゼロ</TD>
    <TD width="17%">Z = 1</TD></TR>
  <TR>
    <TD height=19>BNE [address]（label）</TD>
    <TD>等しくない</TD>
    <TD>比較結果が等しくないかゼロでない</TD>
    <TD>Z = 0</TD></TR>
  <TR>
    <TD height=19>BCS [address]（label）</TD>
    <TD>キャリー・セット</TD>
    <TD>算術演算の結果が桁上がりする</TD>
    <TD>C = 1</TD></TR>
  <TR>
    <TD height=19>BCC [address]（label）</TD>
    <TD>キャリー・クリア</TD>
    <TD>算術演算の結果が桁上がりしない</TD>
    <TD>C = 0</TD></TR>
  <TR>
    <TD height=19>BMI [address]（label）</TD>
    <TD>マイナス</TD>
    <TD>結果が負または否定</TD>
    <TD>N = 1</TD></TR>
  <TR>
    <TD height=19>BPL [address]（label）</TD>
    <TD>プラス</TD>
    <TD>結果が正またはゼロ</TD>
    <TD>N = 0</TD></TR>
  <TR>
    <TD height=19>BVS [address]（label）</TD>
    <TD>オーバーフローのセット</TD>
    <TD>符号付き整数演算でオーバーフローが起きる</TD>
    <TD>V = 1</TD></TR>
  <TR>
    <TD height=19>BVC [address]（label）</TD>
    <TD>オーバーフローのクリア</TD>
    <TD>符号付き整数演算でオーバーフローがない</TD>
    <TD>V = 0</TD></TR>
  <TR>
    <TD height=19>BHI [address]（label）</TD>
    <TD>大きい</TD>
    <TD>符号無し比較で大きい</TD>
    <TD>C = 1 , Z = 0</TD></TR>
  <TR>
    <TD height=19>BLS [address]（label）</TD>
    <TD>小さいか同じ</TD>
    <TD>符号無し比較で小さいか等しい</TD>
    <TD>C = 0 , Z = 1</TD></TR>
  <TR>
    <TD height=19>BGE [address]（label）</TD>
    <TD>大きいか等しい</TD>
    <TD>符号付き整数演算でより大きいか等しい</TD>
    <TD>N = V</TD></TR>
  <TR>
    <TD height=19>BLT [address]（label）</TD>
    <TD>小さい</TD>
    <TD>符号付き整数演算でより小さい</TD>
    <TD>N != V</TD></TR>
  <TR>
    <TD height=19>BGT [address]（label）</TD>
    <TD>大きい</TD>
    <TD>符号付き整数演算でより大きい</TD>
    <TD>Z = 0 and N = V</TD></TR>
  <TR>
    <TD height=19>BLE [address]（label）</TD>
    <TD>小さいか等しい</TD>
    <TD>符号付き整数演算でより小さいか等しい</TD>
    <TD>Z = 1 or N != V</TD></TR></TBODY></TABLE></DIV>
<P align=left>補足：まず補足。Z,C,N,V等は条件フラグと呼ばれるもので、これが0（OFF）か1（ON）かを判別して条件分岐しています。</P>
<P align=left>　　　　上記の条件フラグはThumb命令において殆どの命令がこの条件フラグの状態を変化させています。ARM命令では</P>
<P 
align=left>　　　　全ての命令に対して条件（EQ、NE等）をつけられますが、Thumb命令ではB（Branch）命令にしか付加できないので</P>
<P align=left>　　　　この命令しか条件フラグの影響は受けないと考えてもらって結構です。因みにこの命令はよくCMP命令とペアで使わ</P>
<P align=left>　　　　れることが多いです。では下に例を示します。</P>
<P align=left>&nbsp;</P>
<P align=left>例：　　CMP R0,#99　　　　　　　</P>
<P align=left>　　　　BLT JUMP　　　　　　　　　 </P>
<P align=left>　　　　MOV R1,#99</P>
<P align=left>　　　　STRB R1,[R2]</P>
<P align=left>JUMP</P>
<P align=left>　　　　ADD R1,#1</P>
<P align=left>　　　　STRB R1,[R2]</P>
<P align=left>&nbsp;</P>
<P align=left>意味：1行目・・・R0-99</P>
<P align=left>　　　 2行目・・・比較の結果でR0が99より小さい場合はラベルJUMPに分岐する</P>
<P align=left>　　　 3行目・・・R1に99を格納する</P>
<P align=left>　　　 4行目・・・R2で示されるメモリアドレスにR1の値をバイトストアする</P>
<P align=left>　　　 5行目・・・ラベル</P>
<P align=left>　　　 6行目・・・R1に1を足す</P>
<P align=left>　　　 7行目・・・4行目と同じ</P>
<P align=left>&nbsp;</P>
<P align=left>&nbsp;</P>
<P 
align=left>補足：ほとんどの場合がCMPとペアなのでCMPの引き算の結果が等しいだったらBEQ、等しくなかったらBNE等と考えてください。</P>
<HR>

<P class=border align=left><A name=Jmp></A>無条件分岐命令（Branch）</P>
<DIV align=left>
<TABLE border=1 width="82%">
  <TBODY>
  <TR>
    <TD height=19 width="15%">B [address]（label）</TD>
    <TD width="85%">[PC±2KB] に強制分岐。今実行してるプログラムのアドレスから±2048Byteまで</TD></TR>
  <TR>
    <TD height=19>BL [address]（label）</TD>
    <TD>[PC±4MB]に強制分岐。今実行してるプログラムのアドレスから±409600Byteまで</TD></TR>
  <TR>
    <TD height=19>BX Rd（Hs）</TD>
    <TD>R0～R15が示すアドレスに分岐、同時にステート変更（第0bitが0の場合はARMステート、1の場合はThumbステートに移行）</TD></TR></TBODY></TABLE></DIV>
<P align=left>例：B（L） JUMP</P>
<P align=left>意味：ラベルJUMPに強制分岐</P>
<P align=left>補足：BL命令（Long 
Branch）だけはThumb命令の中で唯一、1命令で2命令分（4Byte）使います。よくWRAMやIRAMに飛ばして処理しようと</P>
<P align=left>　　　 
研究してる人がいますが、距離が足りないので意味がないです。（私も一時期、研究しましたがとてもじゃないですけど実用的ではないです）</P>
<P align=left>　　　 BX命令はARM命令とThumb命令の切り替えを行う命令です。まず使わないと思ってください。使えば、16bitから</P>
<P align=left>　　　 
32bitに広がるので扱える数の制約が緩んでより自由なプログラムが組めますが、改造コードがものすごく長くなります・・・（汗）。</P>
<HR>

<P class=border align=left><A name=Swi></A>ソフトウェア割り込み（Software Interrupt）</P>
<DIV align=left>
<TABLE border=1 width="92%">
  <TBODY>
  <TR>
    <TD height=19 width="8%">SWI #imm</TD>
    <TD width="92%">次の命令のアドレスをLRにコピー、CPSRの内容を 
      SPSR_svcにコピー、SWIベクタアドレスをPCにコピーして、ARMステートに切り替え、SVCモードに入る</TD></TR></TBODY></TABLE></DIV>
<P align=left>例：SWI 10</P>
<P align=left>意味：ソフトウェア割り込み例外を発生させる。処理番号10をSWIハンドラに渡す。</P>
<P align=left>補足：BIOSのファンクションコールなので使いどころがないです。GBAでプログラム改造する場合、まず使わない命令です（笑）。</P>
<HR>

<P class=border><A name=Break></A>ブレークポイント（Breakpoint）</P>
<DIV align=left>
<TABLE border=1 width="41%">
  <TBODY>
  <TR>
    <TD height=19 width="19%">BKPT #imm</TD>
    <TD 
width="81%">ブレークポイントを設置する。#immの値は（8bit=255）まで</TD></TR></TBODY></TABLE></DIV>
<P align=left>例：BKPT #1</P>
<P align=left>意味：ブレークポイントを設置。設置番号は1</P>
<P>補足：この命令もまず使わないです。デバッガ側が勝手に設定してくれます。デバッガ側の動作を見てみるとどうやら#immの値は</P>
<P>　　　 設置番号のよう。1番目のブレークポイントには1が2番目には2という感じ。この命令をCPUに対して実行できるということは、</P>
<P>　　　 GBAのCPUはARMアーキテクチャversion5Tを実装してる模様。そうすると無条件分岐命令の[BLX]も使えそうな予感だが・・・。</P>
<HR>

<P class=border align=left><A name=Loop></A>条件ループの例</P>
<P align=left>&nbsp;</P>
<P 
align=left>条件ループの例を簡単に説明します。この時、[R2=0x2000000]とします。このループはメモリアドレス0x2000000から+2hずつアドレスを</P>
<P 
align=left>足していきながらR1とR3の値を書き込みをするプログラムです。結果として0163、0263、0363、0463、0563・・・FF63まで書き込みを繰り返します。</P>
<P 
align=left>このようなループはアイテム番号と個数が連続して並んでいるデータ等に対して有用なループだと思われます。GBAではありませんが実際ファイナ</P>
<P align=left>ルファンタジー4はこの形式でした。しかしPARやX-TAには連続書き込みコードがあるので、ほとんど使わないかも（汗）。</P>
<P align=left>&nbsp;</P>
<P align=left>CMP命令を使う条件ループの例：</P>
<P align=left>　　　　　MOV R0,#255　　　　　　　　　　　　;R0 = 255　（カウント用の値255を格納）</P>
<P align=left>　　　　　MOV R1,#1　　　　　　　　　　　　　 ;R1 = 1　（アイテム番号の初期値1を格納）</P>
<P align=left>　　　　　MOV R3,#99　　　　　　　　　　　　 ;R3 = 99　（アイテムの最大個数99を格納）</P>
<P align=left>LOOP</P>
<P align=left>　　　　　STRB R1,[R2]　　　　　　　　　　　 ;[R2] = 
R1　（R2の値が示すメモリアドレスにR1の値をバイトストア）</P>
<P align=left>　　　　　STRB R3,[R2,#1]　　　　　　　　　 ;[R2 + 1] = 
R3　（R2に1を足した値が示すメモリアドレスにR3の値をバイトストア）</P>
<P align=left>　　　　　ADD R2,#2　　　　　　　　　　　　　 ;R2 = R2 + 2　（R2に2足す）</P>
<P align=left>　　　　　ADD R1,#1　　　　　　　　　　　　　 ;R1 = R1 + 1　（R1に1足す）</P>
<P align=left>　　　　　SUB R0,#1　　　　　　　　　　　　　 ;R0 = R0 - 1　（R0から1引く）</P>
<P align=left>　　　　　CMP R0,#0　　　　　　　　　　　　　;R0 = R0 - 0　（比較演算する結果はCPSRへ格納される）</P>
<P align=left>　　　　　BNE LOOP　　　　　　　　　　　　　 ;（R0 - 0が等しくない <FONT color=#ff0000>（R0 
&gt; 0 or R0 &lt; 0）</FONT> 場合LOOPに分岐）</P>
<P align=left>　　　　　　　　　　　　　　　　　　　　　　　　　;（逆にR0 = 0であったなら分岐せずに素通り）</P>
<P align=left>&nbsp;</P>
<P align=left>CMPを使わない条件ループの例：</P>
<P align=left>　　　　　MOV R0,#255　　　　　　　　　　　　;R0 = 255　（カウント用の値255を格納）</P>
<P align=left>　　　　　MOV R1,#1　　　　　　　　　　　　　 ;R1 = 1　（アイテム番号の初期値1を格納）</P>
<P align=left>　　　　　MOV R3,#99　　　　　　　　　　　　 ;R3 = 99　（アイテムの最大個数99を格納）</P>
<P align=left>LOOP</P>
<P align=left>　　　　　STRB R1,[R2]　　　　　　　　　　　 ;[R2] = 
R1　（R2の値が示すメモリアドレスにR1の値をバイトストア）</P>
<P align=left>　　　　　STRB R3,[R2,#1]　　　　　　　　　 ;[R2 + 1] = 
R3　（R2に1を足した値が示すメモリアドレスにR3の値をバイトストア）</P>
<P align=left>　　　　　ADD R2,#2　　　　　　　　　　　　　 ;R2 = R2 + 2　（R2に2足す）</P>
<P align=left>　　　　　ADD R1,#1　　　　　　　　　　　　　 ;R1 = R1 + 1　（R1に1足す）</P>
<P align=left>　　　　　SUB R0,#1　　　　　　　　　　　　　 ;R0 = R0 - 
1　（R0から1引く。この時、演算結果がCPSRの<FONT color=#ff0000> 条件フラグにセット</FONT> される）</P>
<P align=left>　　　　　BGT LOOP　　　　　　　　　　　　　 ;（ (R0 = R0 - 1) が <FONT 
color=#ff0000>0以上 </FONT>ならLOOPに分岐する）</P>
<P align=left>　　　　　　　　　　　　　　　　　　　　　　　　　;（符号付き整数演算の結果が<FONT color=#ff0000> 
0より小さいなら </FONT>分岐せずに素通り）</P>
<P align=left>&nbsp;</P>
<P align=left>補足：まぁ1行減っただけですが、CMP使わないほうが1命令分省けます。慣れてる方はこっちの方がいいかもしれません。</P>
<P align=left>　　　 PAR用に直すと1行分省けますからね。ちなみに書いてませんがADD命令もCPSRに条件フラグをセットしています。</P>
<HR>
</DIV>
<DIV style="MARGIN-BOTTOM: 7px" align=center>
<SCRIPT type=text/javascript src="">
</SCRIPT>
<!--
<script type="text/javascript" src="http://www.aaacafe.ne.jp/js/search_frame.js"></script>
-->
<SCRIPT type=text/javascript 
src="http://st.search.livedoor.com/research/search_frame.js"></SCRIPT>

<SCRIPT type=text/javascript>
livedoorSearchShowReSearchFrame({
     search_id : 'ld_aaajs_sl'
});
</SCRIPT>

<SCRIPT type=text/javascript>
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</SCRIPT>

<SCRIPT type=text/javascript>
var pageTracker = _gat._getTracker("UA-2244924-59");
pageTracker._initData();
pageTracker._trackPageview();
</SCRIPT>

<SCRIPT type=text/javascript>
lcs_do(); 
</SCRIPT>
</DIV></BODY></HTML>
